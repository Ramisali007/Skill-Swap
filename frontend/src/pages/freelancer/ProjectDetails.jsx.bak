import { useState, useEffect } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

// Helper function to get status badge color
const getStatusBadgeColor = (status) => {
  switch (status) {
    case 'open':
      return 'bg-yellow-100 text-yellow-800';
    case 'in_progress':
      return 'bg-blue-100 text-blue-800';
    case 'completed':
      return 'bg-green-100 text-green-800';
    case 'cancelled':
      return 'bg-red-100 text-red-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

const FreelancerProjectDetails = () => {
  const [project, setProject] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [bidAmount, setBidAmount] = useState('');
  const [bidProposal, setBidProposal] = useState('');
  const [deliveryTime, setDeliveryTime] = useState('');
  const [showBidForm, setShowBidForm] = useState(false);
  const [showSubmitWorkForm, setShowSubmitWorkForm] = useState(false);
  const [workDescription, setWorkDescription] = useState('');
  const [workFiles, setWorkFiles] = useState([]);
  const [submittingWork, setSubmittingWork] = useState(false);

  const { id } = useParams();
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProject = async () => {
      setLoading(true);
      setError(null);

      try {
        // Add a timestamp to prevent caching
        const timestamp = new Date().getTime();
        const response = await axios.get(`/api/projects/${id}?_=${timestamp}`);
        console.log('Project data from API:', response.data);

        if (response.data && response.data.project) {
          // Transform the data to match our component's expected format
          const projectData = {
            id: response.data.project._id,
            title: response.data.project.title,
            description: response.data.project.description,
            category: response.data.project.category,
            skills: response.data.project.skills || [],
            budget: response.data.project.budget,
            deadline: response.data.project.deadline,
            status: response.data.project.status,
            client: {
              id: response.data.project.client._id,
              name: response.data.project.client.name || (response.data.project.client.user ? response.data.project.client.user.name : 'Unknown Client'),
              rating: response.data.project.client.rating || 4.5,
              projectsPosted: response.data.project.client.projectsPosted || 1,
              user: {
                _id: response.data.project.client.user ? response.data.project.client.user._id : response.data.project.client._id
              }
            },
            milestones: (response.data.project.milestones || []).map(milestone => ({
              id: milestone._id,
              title: milestone.title,
              description: milestone.description,
              amount: milestone.amount,
              status: milestone.status,
              dueDate: milestone.dueDate,
              completedDate: milestone.completedDate
            })),
            attachments: (response.data.project.attachments || []).map(attachment => ({
              name: attachment.name,
              url: attachment.url,
              uploadedAt: attachment.uploadedAt
            })),
            messages: [], // We'll fetch messages separately or from a different endpoint
            createdAt: response.data.project.createdAt
          };

          setProject(projectData);
        } else {
          throw new Error('Invalid project data received from server');
        }

        setLoading(false);
      } catch (err) {
        console.error('Error fetching project:', err);
        setError('Failed to load project details. Please try again later.');
        setLoading(false);
      }
    };

    fetchProject();
  }, [id]);

  // Using the getStatusBadgeColor function defined at the top of the file

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-indigo-600"></div>
        <p className="mt-4 text-sm text-indigo-600 font-medium">Loading project details...</p>
      </div>
    );
  }

  // Handle bid submission
  const handleSubmitBid = async (e) => {
    e.preventDefault();

    if (!bidAmount || !bidProposal || !deliveryTime) {
      alert('Please fill in all fields');
      return;
    }

    try {
      const response = await axios.post(`/api/projects/${id}/bids`, {
        amount: parseFloat(bidAmount),
        proposal: bidProposal,
        deliveryTime: deliveryTime
      });

      console.log('Bid submitted successfully:', response.data);
      alert('Your bid has been submitted successfully!');
      setShowBidForm(false);

      // Refresh the page to show the new bid
      window.location.reload();
    } catch (err) {
      console.error('Error submitting bid:', err);
      alert('Failed to submit bid. Please try again later.');
    }
  };

  // Handle work submission
  const handleSubmitWork = async (e) => {
    e.preventDefault();

    if (!workDescription) {
      alert('Please provide a description of the work completed');
      return;
    }

    try {
      setSubmittingWork(true);

      // Create form data for file upload
      const formData = new FormData();
      formData.append('description', workDescription);

      // Add files to form data
      if (workFiles.length > 0) {
        for (let i = 0; i < workFiles.length; i++) {
          formData.append('files', workFiles[i]);
        }
      }

      // Submit work
      const response = await axios.post(`/api/projects/${id}/submissions`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      console.log('Work submitted successfully:', response.data);
      alert('Your work has been submitted successfully!');
      setShowSubmitWorkForm(false);
      setWorkDescription('');
      setWorkFiles([]);

      // Refresh the page to show the updated project status
      window.location.reload();
    } catch (err) {
      console.error('Error submitting work:', err);
      alert('Failed to submit work. Please try again later.');
    } finally {
      setSubmittingWork(false);
    }
  };

  // Handle file selection
  const handleFileChange = (e) => {
    setWorkFiles(e.target.files);
  };

  if (error) {
    return (
      <div className="bg-white shadow-lg overflow-hidden sm:rounded-xl p-8">
        <div className="bg-red-50 border border-red-100 rounded-xl p-6 shadow-md">
          <div className="flex flex-col items-center text-center sm:flex-row sm:text-left">
            <div className="flex-shrink-0 bg-red-100 rounded-full p-3 mb-4 sm:mb-0">
              <svg className="h-8 w-8 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-0 sm:ml-5 flex-1">
              <h3 className="text-lg font-semibold text-red-800">{error}</h3>
              <p className="mt-2 text-sm text-red-600">
                We encountered an issue while loading the project details. Please try again.
              </p>
              <div className="mt-5">
                <button
                  type="button"
                  onClick={() => window.location.reload()}
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-gradient-to-r from-red-600 to-red-700 hover:from-red-500 hover:to-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-all duration-300 transform hover:-translate-y-0.5"
                >
                  <svg className="mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Try Again
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!project) {
    return (
      <div className="bg-white shadow-lg overflow-hidden sm:rounded-xl p-8">
        <div className="text-center">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-indigo-100 rounded-full mb-4">
            <svg className="h-8 w-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
            </svg>
          </div>
          <h3 className="text-xl font-semibold text-gray-900">Project not found</h3>
          <p className="mt-2 text-base text-gray-600 max-w-md mx-auto">
            The project you're looking for doesn't exist or has been removed.
          </p>
          <div className="mt-6">
            <Link
              to="/freelancer/browse-projects"
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-300 transform hover:-translate-y-0.5"
            >
              <svg className="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              Browse Available Projects
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8 animate-fadeIn">
      {/* Project Header */}
      <div className="bg-white shadow-lg overflow-hidden sm:rounded-xl">
        <div className="px-6 py-6 sm:px-8 bg-gradient-to-r from-indigo-700 to-purple-700 relative overflow-hidden">
          <div className="absolute top-0 right-0 w-64 h-64 opacity-10">
            <svg className="w-full h-full" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
              <path fill="#FFFFFF" d="M47.1,-61.5C59.8,-52.8,68.5,-37.5,72.5,-21.3C76.5,-5.1,75.8,12,69.3,26.5C62.8,41,50.5,52.8,36.3,60.5C22.1,68.2,6,71.8,-10.9,71.1C-27.9,70.4,-45.6,65.3,-57.5,53.7C-69.3,42.1,-75.2,24,-75.8,5.8C-76.4,-12.4,-71.7,-30.7,-60.8,-43.9C-49.9,-57.1,-32.9,-65.2,-15.8,-67.8C1.3,-70.4,18.5,-67.5,34.4,-70.2C50.3,-72.9,64.9,-81.2,47.1,-61.5Z" transform="translate(100 100)" />
            </svg>
          </div>
          <div className="relative z-10">
            <h1 className="text-2xl leading-8 font-bold text-white">{project.title}</h1>
            <p className="mt-2 max-w-2xl text-base text-indigo-100">
              Posted on {new Date(project.createdAt).toLocaleDateString()}
            </p>
          </div>
        </div>
        <div className="px-6 py-4 sm:px-8 border-b border-indigo-100 bg-white flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div className="flex flex-wrap gap-2">
            <span className={`px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${getStatusBadgeColor(project.status)}`}>
              {project.status.replace('_', ' ').charAt(0).toUpperCase() + project.status.replace('_', ' ').slice(1)}
            </span>
            <span className="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full bg-green-100 text-green-800">
              ${project.budget}
            </span>
            <span className="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
              Due: {new Date(project.deadline).toLocaleDateString()}
            </span>
          </div>
          <div className="flex flex-wrap gap-3">
            <Link
              to={`/messages/conversations/new?recipientId=${project.client.user ? project.client.user._id : project.client.id}&projectId=${project.id}`}
              className="inline-flex items-center px-3 py-2 border border-indigo-300 text-sm font-medium rounded-lg text-indigo-700 bg-white hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-sm transition-all duration-200"
            >
              <svg className="mr-2 h-5 w-5 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path>
              </svg>
              Message Client
            </Link>
            {project.status === 'in_progress' && (
              <button
                type="button"
                onClick={() => setShowSubmitWorkForm(!showSubmitWorkForm)}
                className="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-300 transform hover:-translate-y-0.5"
              >
                <svg className="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                {showSubmitWorkForm ? 'Cancel Submission' : 'Submit Work'}
              </button>
            )}
            {project.status === 'open' && (
              <button
                type="button"
                onClick={() => setShowBidForm(!showBidForm)}
                className="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 transform hover:-translate-y-0.5"
              >
                <svg className="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                {showBidForm ? 'Cancel Bid' : 'Place Bid'}
              </button>
            )}
          </div>
        </div>

        {/* Work Submission Form */}
        {showSubmitWorkForm && project.status === 'in_progress' && (
          <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900">Submit Your Work</h3>
            <p className="mt-1 max-w-2xl text-sm text-gray-500">
              Provide details about the work you've completed and upload any relevant files.
            </p>

            <form onSubmit={handleSubmitWork} className="mt-4 space-y-4">
              <div>
                <label htmlFor="workDescription" className="block text-sm font-medium text-gray-700">
                  Description of Work Completed
                </label>
                <div className="mt-1">
                  <textarea
                    id="workDescription"
                    name="workDescription"
                    rows={4}
                    value={workDescription}
                    onChange={(e) => setWorkDescription(e.target.value)}
                    className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md"
                    placeholder="Describe the work you've completed, including any challenges faced and how you resolved them."
                    required
                  />
                </div>
              </div>

              <div>
                <label htmlFor="workFiles" className="block text-sm font-medium text-gray-700">
                  Upload Files (Optional)
                </label>
                <div className="mt-1">
                  <input
                    type="file"
                    id="workFiles"
                    name="workFiles"
                    multiple
                    onChange={handleFileChange}
                    className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                  />
                </div>
                <p className="mt-1 text-xs text-gray-500">
                  You can upload multiple files (max 5 files, 10MB each).
                </p>
              </div>

              <div className="flex justify-end">
                <button
                  type="button"
                  onClick={() => setShowSubmitWorkForm(false)}
                  className="mr-3 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={submittingWork}
                  className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${
                    submittingWork ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
                  }`}
                >
                  {submittingWork ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Submitting...
                    </>
                  ) : (
                    'Submit Work'
                  )}
                </button>
              </div>
            </form>
          </div>
        )}

        {/* Bid Form */}
        {showBidForm && project.status === 'open' && (
          <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900">Place Your Bid</h3>
            <p className="mt-1 max-w-2xl text-sm text-gray-500">
              Submit a competitive bid to work on this project.
            </p>

            <form onSubmit={handleSubmitBid} className="mt-4 space-y-4">
              <div>
                <label htmlFor="bidAmount" className="block text-sm font-medium text-gray-700">
                  Bid Amount ($)
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">$</span>
                  </div>
                  <input
                    type="number"
                    name="bidAmount"
                    id="bidAmount"
                    value={bidAmount}
                    onChange={(e) => setBidAmount(e.target.value)}
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md"
                    placeholder="0.00"
                    min="1"
                    step="0.01"
                    required
                  />
                </div>
                <p className="mt-1 text-xs text-gray-500">
                  Project budget: ${project.budget}
                </p>
              </div>

              <div>
                <label htmlFor="deliveryTime" className="block text-sm font-medium text-gray-700">
                  Delivery Time (days)
                </label>
                <div className="mt-1">
                  <input
                    type="number"
                    name="deliveryTime"
                    id="deliveryTime"
                    value={deliveryTime}
                    onChange={(e) => setDeliveryTime(e.target.value)}
                    className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md"
                    placeholder="Number of days to complete"
                    min="1"
                    required
                  />
                </div>
              </div>

              <div>
                <label htmlFor="bidProposal" className="block text-sm font-medium text-gray-700">
                  Proposal
                </label>
                <div className="mt-1">
                  <textarea
                    id="bidProposal"
                    name="bidProposal"
                    rows={4}
                    value={bidProposal}
                    onChange={(e) => setBidProposal(e.target.value)}
                    className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md"
                    placeholder="Describe why you're the best fit for this project and how you plan to approach it."
                    required
                  />
                </div>
              </div>

              <div className="flex justify-end">
                <button
                  type="button"
                  onClick={() => setShowBidForm(false)}
                  className="mr-3 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Submit Bid
                </button>
              </div>
            </form>
          </div>
        )}
        <div className="px-6 py-6 sm:px-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="md:col-span-2 space-y-6">
              <div className="bg-white p-6 rounded-xl border border-indigo-100 shadow-sm">
                <h3 className="text-lg font-semibold text-indigo-900 flex items-center mb-4">
                  <svg className="h-5 w-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                  Project Description
                </h3>
                <div className="prose max-w-none text-gray-600">
                  <p>{project.description}</p>
                </div>
              </div>

              <div className="bg-white p-6 rounded-xl border border-indigo-100 shadow-sm">
                <h3 className="text-lg font-semibold text-indigo-900 flex items-center mb-4">
                  <svg className="h-5 w-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                  </svg>
                  Skills Required
                </h3>
                <div className="flex flex-wrap gap-2">
                  {project.skills.map((skill, index) => (
                    <span key={index} className="inline-flex items-center px-3 py-1 rounded-lg text-sm font-medium bg-indigo-50 text-indigo-700 border border-indigo-100 transition-all duration-200 hover:bg-indigo-100">
                      {skill}
                    </span>
                  ))}
                  {project.skills.length === 0 && (
                    <p className="text-gray-500 italic">No specific skills listed for this project.</p>
                  )}
                </div>
              </div>
            </div>

            <div className="space-y-6">
              <div className="bg-white p-6 rounded-xl border border-indigo-100 shadow-sm">
                <h3 className="text-lg font-semibold text-indigo-900 flex items-center mb-4">
                  <svg className="h-5 w-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                  About the Client
                </h3>
                <div className="flex items-center mb-4">
                  <div className="flex-shrink-0">
                    <div className="h-14 w-14 rounded-full bg-gradient-to-br from-indigo-100 to-purple-100 flex items-center justify-center shadow-sm border border-indigo-50">
                      <span className="text-indigo-700 font-semibold text-lg">{project.client.name.charAt(0)}</span>
                    </div>
                  </div>
                  <div className="ml-4">
                    <p className="text-base font-medium text-gray-900">{project.client.name}</p>
                    <div className="flex items-center mt-1">
                      <div className="flex text-amber-400">
                        {[...Array(5)].map((_, i) => (
                          <svg
                            key={i}
                            className={`h-4 w-4 ${i < Math.floor(project.client.rating) ? 'text-amber-400' : 'text-gray-300'}`}
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                          >
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                          </svg>
                        ))}
                      </div>
                      <span className="ml-2 text-sm font-medium text-gray-600">{project.client.rating}</span>
                    </div>
                  </div>
                </div>
                <div className="border-t border-indigo-100 pt-4 mt-4">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Projects Posted</span>
                    <span className="font-medium text-indigo-700">{project.client.projectsPosted}</span>
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-xl border border-indigo-100 shadow-sm">
                <h3 className="text-lg font-semibold text-indigo-900 flex items-center mb-4">
                  <svg className="h-5 w-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Project Details
                </h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Category</span>
                    <span className="font-medium text-indigo-700">{project.category}</span>
                  </div>
                  <div className="border-t border-indigo-50 pt-3 flex justify-between">
                    <span className="text-gray-600">Budget</span>
                    <span className="font-medium text-green-600">${project.budget}</span>
                  </div>
                  <div className="border-t border-indigo-50 pt-3 flex justify-between">
                    <span className="text-gray-600">Deadline</span>
                    <span className="font-medium text-indigo-700">{new Date(project.deadline).toLocaleDateString()}</span>
                  </div>
                  <div className="border-t border-indigo-50 pt-3 flex justify-between">
                    <span className="text-gray-600">Status</span>
                    <span className={`font-medium ${
                      project.status === 'open' ? 'text-yellow-600' :
                      project.status === 'in_progress' ? 'text-blue-600' :
                      project.status === 'completed' ? 'text-green-600' :
                      'text-red-600'
                    }`}>
                      {project.status.replace('_', ' ').charAt(0).toUpperCase() + project.status.replace('_', ' ').slice(1)}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {project.attachments.length > 0 && (
          <div className="px-6 py-6 sm:px-8 border-t border-indigo-100">
            <div className="bg-white p-6 rounded-xl border border-indigo-100 shadow-sm">
              <h3 className="text-lg font-semibold text-indigo-900 flex items-center mb-4">
                <svg className="h-5 w-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
                </svg>
                Project Attachments
              </h3>
              <ul className="divide-y divide-indigo-100">
                {project.attachments.map((attachment, index) => (
                  <li key={index} className="py-3 flex items-center justify-between hover:bg-indigo-50/30 px-3 rounded-lg transition-colors duration-150">
                    <div className="flex items-center">
                      <svg className="h-5 w-5 text-indigo-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      <span className="text-gray-700">{attachment.name}</span>
                    </div>
                    <a
                      href={attachment.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-indigo-600 hover:text-indigo-800 font-medium text-sm flex items-center"
                    >
                      Download
                      <svg className="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                      </svg>
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
        </div>
      </div>

      {/* Milestones */}
      <div className="bg-white shadow-lg overflow-hidden sm:rounded-xl border border-indigo-50">
        <div className="px-6 py-6 sm:px-8 bg-gradient-to-r from-blue-700 to-indigo-700 relative overflow-hidden">
          <div className="absolute top-0 right-0 w-64 h-64 opacity-10">
            <svg className="w-full h-full" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
              <path fill="#FFFFFF" d="M47.1,-61.5C59.8,-52.8,68.5,-37.5,72.5,-21.3C76.5,-5.1,75.8,12,69.3,26.5C62.8,41,50.5,52.8,36.3,60.5C22.1,68.2,6,71.8,-10.9,71.1C-27.9,70.4,-45.6,65.3,-57.5,53.7C-69.3,42.1,-75.2,24,-75.8,5.8C-76.4,-12.4,-71.7,-30.7,-60.8,-43.9C-49.9,-57.1,-32.9,-65.2,-15.8,-67.8C1.3,-70.4,18.5,-67.5,34.4,-70.2C50.3,-72.9,64.9,-81.2,47.1,-61.5Z" transform="translate(100 100)" />
            </svg>
          </div>
          <div className="relative z-10">
            <h2 className="text-xl leading-8 font-bold text-white flex items-center">
              <svg className="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
              </svg>
              Project Milestones
            </h2>
          </div>
        </div>
        <div className="px-6 py-6 sm:px-8">
          <ul className="divide-y divide-indigo-100">
            {project.milestones.map((milestone) => (
              <li key={milestone.id} className="py-5 hover:bg-indigo-50/30 transition-colors duration-150 rounded-lg px-4">
                <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                  <div className="flex-1">
                    <div className="flex items-center">
                      <div className={`w-3 h-3 rounded-full mr-3 ${
                        milestone.status === 'completed' ? 'bg-green-500' :
                        milestone.status === 'in_progress' ? 'bg-blue-500' :
                        milestone.status === 'pending' ? 'bg-yellow-500' : 'bg-red-500'
                      }`}></div>
                      <h3 className="text-base font-semibold text-gray-900">{milestone.title}</h3>
                    </div>
                    <p className="mt-2 text-sm text-gray-600 ml-6">{milestone.description}</p>
                    <div className="mt-2 flex flex-wrap gap-4 ml-6">
                      <div className="flex items-center text-sm text-gray-500">
                        <svg className="h-4 w-4 mr-1 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        Due: {new Date(milestone.dueDate).toLocaleDateString()}
                      </div>
                      {milestone.completedDate && (
                        <div className="flex items-center text-sm text-green-600">
                          <svg className="h-4 w-4 mr-1 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                          Completed: {new Date(milestone.completedDate).toLocaleDateString()}
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="flex flex-col items-end gap-2">
                    <span className={`px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${
                      milestone.status === 'completed' ? 'bg-green-100 text-green-800' :
                      milestone.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                      milestone.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {milestone.status.charAt(0).toUpperCase() + milestone.status.slice(1)}
                    </span>
                    <span className="text-base font-bold text-green-600">${milestone.amount}</span>
                    {milestone.status === 'in_progress' && (
                      <button
                        type="button"
                        className="mt-2 inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-300 transform hover:-translate-y-0.5"
                      >
                        <svg className="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Submit for Review
                      </button>
                    )}
                  </div>
                </div>
              </li>
            ))}
            {project.milestones.length === 0 && (
              <li className="py-8 text-center">
                <div className="inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4">
                  <svg className="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <p className="text-gray-600 mb-2">No milestones have been set for this project.</p>
                <p className="text-sm text-gray-500">Milestones will appear here once they are defined.</p>
              </li>
            )}
          </ul>
        </div>
      </div>

      {/* Recent Messages */}
      <div className="bg-white shadow-lg overflow-hidden sm:rounded-xl border border-indigo-50">
        <div className="px-6 py-6 sm:px-8 bg-gradient-to-r from-purple-700 to-indigo-700 relative overflow-hidden">
          <div className="absolute top-0 right-0 w-64 h-64 opacity-10">
            <svg className="w-full h-full" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
              <path fill="#FFFFFF" d="M47.1,-61.5C59.8,-52.8,68.5,-37.5,72.5,-21.3C76.5,-5.1,75.8,12,69.3,26.5C62.8,41,50.5,52.8,36.3,60.5C22.1,68.2,6,71.8,-10.9,71.1C-27.9,70.4,-45.6,65.3,-57.5,53.7C-69.3,42.1,-75.2,24,-75.8,5.8C-76.4,-12.4,-71.7,-30.7,-60.8,-43.9C-49.9,-57.1,-32.9,-65.2,-15.8,-67.8C1.3,-70.4,18.5,-67.5,34.4,-70.2C50.3,-72.9,64.9,-81.2,47.1,-61.5Z" transform="translate(100 100)" />
            </svg>
          </div>
          <div className="relative z-10 flex justify-between items-center">
            <h2 className="text-xl leading-8 font-bold text-white flex items-center">
              <svg className="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path>
              </svg>
              Recent Messages
            </h2>
            <Link
              to={`/messages/conversations/new?recipientId=${project.client.user ? project.client.user._id : project.client.id}&projectId=${project.id}`}
              className="inline-flex items-center px-3 py-2 border border-white/20 text-sm font-medium rounded-lg text-white bg-white/10 hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 shadow-sm transition-all duration-200"
            >
              <svg className="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z"></path>
              </svg>
              View All Messages
            </Link>
          </div>
        </div>
        <div className="px-6 py-6 sm:px-8 bg-gradient-to-b from-indigo-50/50 to-white">
          <ul className="space-y-4">
            {project.messages.map((message) => (
              <li key={message.id} className="px-2">
                <div className={`flex ${message.sender === 'freelancer' ? 'justify-end' : ''}`}>
                  <div className={`inline-block max-w-lg rounded-2xl px-5 py-3 shadow-sm ${
                    message.sender === 'freelancer'
                      ? 'bg-gradient-to-br from-indigo-100 to-indigo-200 text-indigo-800 border border-indigo-200'
                      : 'bg-white text-gray-800 border border-gray-200'
                  }`}>
                    <p className="text-sm">{message.content}</p>
                    <p className="mt-2 text-xs text-right font-medium text-gray-500">
                      {new Date(message.timestamp).toLocaleString()}
                    </p>
                  </div>
                </div>
              </li>
            ))}
            {project.messages.length === 0 && (
              <li className="py-8 text-center">
                <div className="inline-flex items-center justify-center w-16 h-16 bg-purple-100 rounded-full mb-4">
                  <svg className="h-8 w-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                  </svg>
                </div>
                <p className="text-gray-600 mb-2">No messages yet</p>
                <p className="text-sm text-gray-500 mb-4">Start a conversation with the client about this project.</p>
                <Link
                  to={`/messages/conversations/new?recipientId=${project.client.user ? project.client.user._id : project.client.id}&projectId=${project.id}`}
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-all duration-300 transform hover:-translate-y-0.5"
                >
                  <svg className="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                  </svg>
                  Send Message
                </Link>
              </li>
            )}
          </ul>
        </div>
      </div>
    </div>
  );
};

export default FreelancerProjectDetails;
